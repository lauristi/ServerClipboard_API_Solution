on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Print current clone project working directory 
        run: |
         
          echo "----------------------------------------------------------------"
          echo Git Workspace: ${{ github.workspace }}
          echo "----------------------------------------------------------------"

          pwd
          ls -la
  
  build:
    runs-on: ubuntu-latest

    env:
      SOLUTION_PATH: ${{ github.workspace }}/ServerClipboard_API_Solution
      PROJECT_PATH: ${{ github.workspace }}/ServerClipboard_API_Solution/ServerClipboard_API
      BUILD_PATH: ${{ github.workspace }}/ServerClipboard_API/bin/Debug/net8.0
      PUBLISH_PATH: ${{ github.workspace }}/ServerClipboard_API/bin/Debug/net8.0/Publish
      ARTIFACT_PATH: ${{ github.workspace }}/ServerClipboard_API/Artifact

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ github.workspace }}
    
    - name: Build
      run: dotnet build --no-restore --configuration Debug
      working-directory: ${{ github.workspace }}
    
    - name: Test
      run: dotnet test --no-build --verbosity normal
      working-directory: ${{ github.workspace }}
    
    - name: Publish
      run: |
         ls -la 
         echo "----------------------------------------------"
         ls -la ${{ env.PROJECT_PATH }}
         
         dotnet publish ${{ env.SOLUTION_PATH }}/ServerClipboard_API/ServerClipboard_API.csproj -c Release
    
    - name: Package Artifacts
      run: |
        
        echo "------------------------------------------------------"
        echo "Verifying build archives"
        echo "------------------------------------------------------"
        #ls -la ${{ env.BUILD_PATH }}
         ls -la ${{ env.PUBLISH_PATH }}
        echo "------------------------------------------------------"
        
        echo "Creating temporary Artifact path"
        mkdir -p ${{ env.ARTIFACT_PATH }}
        
        cp -r ${{ env.BUILD_PATH }}/* ${{ env.ARTIFACT_PATH }}/
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: ${{ env.ARTIFACT_PATH }}
